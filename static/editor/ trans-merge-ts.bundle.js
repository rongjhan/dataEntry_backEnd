"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[421,381],{8119:function(e,n,t){t.r(n),t.d(n,{descriptor:function(){return r},execute:function(){return o}});var a=t(4414),r={deps:{min:2,max:2},inputs:{key:{type:"text",defaultValue:"",required:!0},how:{type:"selection",options:["inner","outer","left","right"],defaultValue:"inner"}}};function o({datas:e,config:n}){var t=function(e){var{key:n,how:t}=e;return`\n    function operation(el){ \n        var newElement = el.trim() \n        newElement = parseInt(newElement).toString() //刪除leading zero\n        return newElement \n    }\n    \n    var data1 = toFrame(datas[0])\n    var data2 = toFrame(datas[1])\n    \n    var operatedOne=data1.loc({columns:["${n}"]}).apply({callable:operation}).values.flat()\n    var operatedTwo=data2.loc({columns:["${n}"]}).apply({callable:operation}).values.flat()\n    \n    data1.drop({ columns: ["${n}"],inplace:true})\n    data2.drop({ columns: ["${n}"],inplace:true})\n    \n    \n    data1.addColumn({column:"${n}",value:operatedOne})\n    data2.addColumn({column:"${n}",value:operatedTwo})\n    var result = dfd.merge({left:data1,right:data2,on:["${n}"],how:"${t}"})\n    // console.log(result.columns)\n    return result.values\n    `}(n);return console.log(t),new Promise((function(n){var r=a.getProcessID(),{resultQue:o,timeoutQue:u,worker:l}=a;u[r]=setInterval((function(){void 0!==o[r]&&(n(o.splice(r,1,void 0)[0]),clearInterval(u.splice(r,1,void 0)[0]))}),100),l.postMessage({processID:r,code:t,datas:e})}))}},4414:function(e,n,t){t.r(n),t.d(n,{getProcessID:function(){return l},resultQue:function(){return o},timeoutQue:function(){return u},worker:function(){return a}});const a=new Worker(new URL(t.p+t.u(222),t.b));let r=0;const o=[],u=[];function l(){return r++}a.onmessage=async function(e){console.log("new",e.data),o[e.data.processID]=e.data.result}}}]);